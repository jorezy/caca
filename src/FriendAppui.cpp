/*
* ============================================================================
*  Name     : CFriendAppUi from FriendAppui.cpp
*  Part of  : Friend
*  Created  : 21.07.2006 by 
*  Implementation notes:
*     Initial content was generated by Series 60 Application Wizard.
*  Version  :
*  Copyright: 
* ============================================================================
*/

// INCLUDE FILES
#include "FriendAppui.h"
#include <Friend.rsg>
#include "Friend.hrh"

#include <avkon.hrh>


// ================= MEMBER FUNCTIONS =======================
//
// ----------------------------------------------------------
// CFriendAppUi::ConstructL()
// 
// ----------------------------------------------------------
//
void CFriendAppUi::ConstructL()
    {
    BaseConstructL();

    iAppContainer = new (ELeave) CFriendContainer;
    iAppContainer->SetMopParent( this );
    iAppContainer->ConstructL( ApplicationRect());//ClientRect() );//
	iAppContainer->SetUIObserver(this);
    AddToStackL( iAppContainer );
    }

// ----------------------------------------------------
// CFriendAppUi::~CFriendAppUi()
// Destructor
// Frees reserved resources
// ----------------------------------------------------
//
CFriendAppUi::~CFriendAppUi()
    {
    if (iAppContainer)
        {
        RemoveFromStack( iAppContainer );
        delete iAppContainer;
        }
   }

// ------------------------------------------------------------------------------
// CFriendAppUi::DynInitMenuPaneL(TInt aResourceId,CEikMenuPane* aMenuPane)
//  This function is called by the EIKON framework just before it displays
//  a menu pane. Its default implementation is empty, and by overriding it,
//  the application can set the state of menu items dynamically according
//  to the state of application data.
// ------------------------------------------------------------------------------
//
void CFriendAppUi::DynInitMenuPaneL(
    TInt /*aResourceId*/,CEikMenuPane* /*aMenuPane*/)
    {
    }

// ----------------------------------------------------
// CFriendAppUi::HandleKeyEventL(
//     const TKeyEvent& aKeyEvent,TEventCode /*aType*/)
// takes care of key event handling
// ----------------------------------------------------
//
TKeyResponse CFriendAppUi::HandleKeyEventL(
    const TKeyEvent& /*aKeyEvent*/,TEventCode /*aType*/)
    {
    return EKeyWasNotConsumed;
    }

// ----------------------------------------------------
// CFriendAppUi::HandleCommandL(TInt aCommand)
// takes care of command handling
// ----------------------------------------------------
//
void CFriendAppUi::HandleCommandL(TInt aCommand)
    {
    switch ( aCommand )
        {
        case EAknSoftkeyOk:
            {
				if(iAppContainer->iStatus==CFriendContainer::ELogin)
				{
					iAppContainer->DoCheckLogin();
				}
				//iEikonEnv->AlertWin(_L("EAknSoftkeyOk"));
				break;
            }
        case EAknSoftkeyCancel:
        case EAknSoftkeyBack:
        case EEikCmdExit:
            {
				if(iAppContainer->iStatus==CFriendContainer::ETalk)
				{
					iAppContainer->DoTalkOver();
				}
				else if(iAppContainer->iStatus==CFriendContainer::EWait || iAppContainer->iStatus==CFriendContainer::EMenu)
				{
					iAppContainer->ExitUI();
				}
				else if(iAppContainer->iStatus==CFriendContainer::ELogin)
				{
					Exit();
				}
            break;
            }
        case EFriendCmdAppTest:  //send message from server
            {
            iAppContainer->DoMenuMessage();
            break;
            }
        case EFriendCmdSms:
            {
            //iAppContainer->SendSms();
            iAppContainer->DoMenuSms();
            break;
            }
        case EFriendCmdMtm:
            {
            iAppContainer->DoMenuMtm();
            break;
            }
        case EFriendCmdTelNum:
            {
            iAppContainer->DoMenuShowTel();
            break;
            }
        case EFriendCmdTel:
            {
            iAppContainer->DoMenuTel();
            break;
            }
		case EFriendCmdEdit:
            {
            iAppContainer->DoMenuEdit();
            break;
            }
        default:
            break;      
        }
    }

void CFriendAppUi::DoExit()
{
	Exit();
}

// End of File  
