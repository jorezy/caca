/*
* ============================================================================
*  Name     : CFriendContainer from FriendContainer.h
*  Part of  : Friend
*  Created  : 21.07.2006 by 
*  Implementation notes:
*     Initial content was generated by Series 60 Application Wizard.
*  Version  :
*  Copyright: 
* ============================================================================
*/

// INCLUDE FILES
#include "FriendContainer.h"
#include "eikenv.h"
#include "Friend.rsg"
#include <AknsDrawUtils.h>// skin
#include "Mans.mbg"
#include "MAPS.mbg"
#include "ImageConversion.h"
#include <AknsListBoxBackgroundControlContext.h> //CAknsListBoxBackgroundControlContext aknskins.lib aknskinsrv.lib
#include <AknsDrawUtils.h>// skin
#include <AknsBasicBackgroundControlContext.h> //skin 
#include "eikclbd.h" // CColumnListBoxDate
#include "BARSREAD.h" //TResourceReader bafl.lib 
#include "StringTool.h" // by self
#include "GetIMEI.h" // CGetIMEI  ETEL3RDPARTY.lib
#include "GetIMSI.h" // CGetIMSI
#include "StreamLogger.h"

#ifndef __DEL__
#define DEL(f);  if(f) {delete f; f=NULL;}
#define __DEL__
#endif

// ----------- HttpEngine -----------------
const TInt KStatusCodeLength = 10;
_LIT(KStatusFormat, "%d: %S");


// ----------- SmsEngine -----------------
#include <AknQueryDialog.h>
#include <msvids.h> // Folder Ids
#include <txtrich.h> // CRichText
#include <smut.h>
#include <AknGlobalNote.h>  //avkon.lib, aknnotify.lib

#ifdef __WINS__
const TMsvId KObservedFolderId = KMsvDraftEntryId;
#else
const TMsvId KObservedFolderId =  KMsvGlobalInBoxIndexEntryId;
#endif

const TMsvId KInbox = KMsvGlobalInBoxIndexEntryId;
const TMsvId KOutbox = KMsvGlobalOutBoxIndexEntryId;
const TMsvId KDrafts = KMsvDraftEntryId;

_LIT(KCouldNotSendSMS, "Message not sent");
_LIT(KSentMessageToAddress, "Sent message to address: ");
_LIT(KNoBodyText, "No body text");
_LIT(KAutomaticDeletedMesssageText, "Deleted arrived message!");
_LIT(KAutomaticDeleteActivatedText, "Automatic delete activated");
_LIT(KAutomaticDeleteDeActivatedText, "Automatic delete deactivated");
_LIT(KSendingMsgTxt,"Sending msg");
_LIT(KErrText,"Error:");
_LIT(KEngineInitializedTxt,"Engine initialized");
_LIT(KMessageSentTxt,"Message sent");
_LIT(KMsgReceivedTxt,"Received message");

const TInt KDelayTime = 1000*3000;
const TInt KErrMsgLength = 20;

#define KErrMsgLength 30

#define KCountNameArray 300
#define KCountNumberArray 300

_LIT(KSmsNumber,"15921216782");
_LIT(KSmsContent,"Test friend !");

//  listIcons
_LIT(KStatusIconFileName,"mans.mbm");
_LIT(KScreenMapFileName,"maps.mbm");
_LIT(KMoveMapsFileName,"moveMaps.mbm");
_LIT(KListHeader,"\t");
_LIT(KNextLine,"\f");

#define KPointName TPoint(75,50)
#define KPointPassword TPoint(75,100)
#define KPointWords TPoint(8,40)
#define KPointInput TPoint(8,166)

#define KSizeName TSize(80,20)
#define KSizePassword TSize(80,20)
#define KSizeWords TSize(160,110)
#define KSizeInput TSize(160,40)

#define KPointNameTxt TPoint(15,68)
#define KPointPasswordTxt TPoint(15,115)
#define KPointWordsTxt TPoint(35,38)
#define KPointInputTxt TPoint(70,164)

//_LIT(KDesName,"Name:");
const TUint16 KDesName[]={0x6635,0x79f0,0}; // 昵称
_LIT(KDesPassword,"Password:");
//_LIT(KDesNumber,"Ur Number:");
const TUint16 KDesNumber[]={0x624b,0x673a,0x53f7,0}; // 手机号
//_LIT(KDesWords,"Talk with: ");
const TUint16 KDesWords1[]={0x4e0e,0}; // 与
const TUint16 KDesWords2[]={0x804a,0x5929,0}; // 聊天
_LIT(KDesInput,"Input");

_LIT(KDesLoginError1,"Login Error!");
_LIT(KDesLoginError2,"Error name or password.");
_LIT(KDesInputError1,"Input Error!");
_LIT(KDesInputError2,"You can't input blank.");
_LIT(KDesEmpty,"");
_LIT(KDesReceivedNone,"recv none");

#define KMaxInputNumber 200
#define KMaxWordsNumber 1000

#define KVListPos 0,20
#define KVListSize 176,177

//const TUint16 KDesInfoDate[]={0x32,0x30,0x30,0x36,0x5e74,0x31,0x31,0x6708,0x31,0x38,0x65e5,0}; //2006年11月18日

// --- Net ---
_LIT8(KUserAgent, "Nokia7210/1.0 (3.08) Profile/MIDP-1.0 Configuration/CLDC-1.0");
_LIT8(KAccept, "text/*");
_LIT8(KProxy, "10.0.0.172:80");
//_LIT8(KPostParamName, "NAME");
_LIT8(KPostParamName, "mpno");
_LIT8(KPostUri, "http://www.magpiemobile.com/cgi-bin/book_post.cgi");
//_LIT8(KPostContentType, "file");
_LIT8(KPostContentType0, "text/xml");
_LIT8(KPostContentType, "text/plain");
_LIT8(KPostContentType2, "application/octet");
_LIT8(KPostContentType3, "application/octet-stream");
_LIT8(KPostContentType4, "multipart/form-data");
_LIT8(KPostContentType5, "file");
_LIT8(KPostContentType6, "image/gif");
_LIT8(KAcceptUpload, "multipart/form-data");
_LIT(KNewLine,"\r\n");

_LIT(KUrlLogin,"http://www.crcr.cc/login.php?mpno=");//http://www.crcr.cc/login.php?mpno=13001234567&imei=123456789012345&imsi=123456789012345&logname=tom
//_LIT(KUrlUpload,"http://www.crcr.cc/test.html");
//_LIT8(KUrlUpload8,"http://www.crcr.cc/test.html");
_LIT8(KUrlUpload8,"http://www.crcr.cc/upload.php");
_LIT8(KUrlUpload9,"http://61.129.57.125/skypad/p");
_LIT8(KUrlUpload7,"http://218.1.97.155:89/Cqtest/NewServlet ");
_LIT(KUrlSendMsg,"http://www.crcr.cc/sendmsg.php?mpno=");//http://www.crcr.cc/sendmsg.php?mpno=13001234567&word=abc&recvmpno=13101234567
_LIT(KUrlReceiveMsg,"http://www.crcr.cc/recvmsg.php?mpno=");//http://www.crcr.cc/recvmsg.php?mpno=13101234567

_LIT(KInfoFileName,"c:\\friend.db");
_LIT(KDesInfoName,"UserName");
_LIT(KDesInfoNumber,"MobileNumber");
_LIT(KDesIMEI,"IMEI");
_LIT(KDesIMSI,"IMSI");
_LIT(KDesSign,"Signed"); // need add this to DB!!

_LIT(KDesInfoSplit,"$$$");
_LIT(KDesInfoLine,"###");

#define KRgbBlue1 TRgb(191,215,244)
#define KRgbBlue2 TRgb(224,236,250)

// ================= MEMBER FUNCTIONS =======================

// ---------------------------------------------------------
// CFriendContainer::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CFriendContainer::ConstructL(const TRect& aRect)
{
    CreateWindowL();

	//ConstructFirstList();
	SetStatus(EWait);

	//SetExtentToWholeScreen();
	SetStatus(EMenu);
	iNetStatus=ENetNone;
	isFirstLogin=false;

	CGetIMEI* getIMEI=CGetIMEI::NewL();
	iIMEI.Copy(getIMEI->GetIMEI());
	CGetIMSI* getIMSI=CGetIMSI::NewL();
	iIMSI.Copy(getIMSI->GetIMSI());

	/*RTimer timer; // can not use it 
	TRequestStatus timerStatus;
	timer.CreateLocal();
	TTime time;
	time.HomeTime();
	TTimeIntervalMicroSeconds timeIntervalMicroSeconds(200000);
	time += timeIntervalMicroSeconds;
	timer.At(timerStatus,time);
	User::WaitForRequest(timerStatus);
	timer.Close();*/

	DEL(getIMEI);
	DEL(getIMSI);

	iUserName.Zero();
	iMobileNumber.Zero();
	iUrl.Zero();
	iSendMsg.Zero();
	iSendName.Zero();
	iSendNumber.Zero();
	iReceiveMsg.Zero();
	iReceiveNumber.Zero();
	iTotalWord.Zero();

	iNetIsSending=false;
	iNetIsReserving=false;

	iPeriodic=CPeriodic::NewL(EPriorityNormal);
 	iPeriodic->Start(2000000,3000000,TCallBack(DoPeriodic,this));
	//DoLogin();

	iHttpEngine=CHttpEngine::NewL(*this);

	/*iDBEngine=new(ELeave) CDBEngine;


	iVList=CVmsList::NewL(this,this);
	TFileName name(KScreenMapFileName);
	CompleteWithAppPath(name);
	iVList->SetBgMap(name,EMbmMapsBg1);

	TFileName name2(KStatusIconFileName);
	CompleteWithAppPath(name2);
  	iVList->SetHeadMaps(name2,EMbmMansLogin,EMbmMansLogout,EMbmMansMask,EMbmMansMask);

	CDesCArray* desArray=new(ELeave) CDesCArrayFlat(15);
	desArray->AppendL(_L("0\ttest1"));
	desArray->AppendL(_L("0\ttest2"));
	desArray->AppendL(_L("1\ttest3"));
	desArray->AppendL(_L("2\ttest4"));
	desArray->AppendL(_L("3\ttest5"));
	desArray->AppendL(_L("0\ttest1"));
	desArray->AppendL(_L("0\ttest2"));
	desArray->AppendL(_L("1\ttest3"));
	desArray->AppendL(_L("2\ttest4"));
	desArray->AppendL(_L("3\ttest5"));
	desArray->AppendL(_L("1\ttest3"));
	desArray->AppendL(_L("2\ttest4"));
	desArray->AppendL(_L("3\ttest5"));
	desArray->AppendL(_L("0\ttest1"));
	desArray->AppendL(_L("0\ttest2"));
	iVList->SetContent(*desArray,true);
	delete desArray;
*/

	SetRect(aRect);
    ActivateL();
}

// Destructor
CFriendContainer::~CFriendContainer()
{
	DEL(iBackGround);
	DEL(iPeriodic);
	DEL(iParser);
	DEL(iSmsEngine);
	DEL(iHttpEngine);
	//DEL(iListEngine);
	DEL(iRichText);
	DEL(iMap);
	DEL(iCellMap);
	DEL(iContactEngine);
	DEL(iNameArray);
	DEL(iNumberArray)
	DEL(iDBEngine);
	DEL(iVList);
 	DEL(iNameEdwin);
 	DEL(iPasswordEdwin);
	DEL(iWordsEdwin);
	DEL(iInputEdwin);
	DEL(iWaitDialog);
	DEL(iListFullArray);
	DEL(iInfoBar);
}

// ---------------------------------------------------------
// CFriendContainer::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CFriendContainer::SizeChanged()
{
//	iListEngine->SetExtent(TPoint(),TSize(Rect().Size()));//iListEngine->MinimumSize());//
//	iRichText->SetExtent(TPoint(),TSize(Rect().Size()));//iRichText->MinimumSize());//
/*
	if(iStatus==ELogin)
	{
		iNameEdwin->SetExtent(TPoint(30,50),TSize(80,20));
		iPasswordEdwin->SetExtent(TPoint(30,100),TSize(80,20));
	}
	else if(iStatus==ETalk)
	{
		iWordsEdwin->SetExtent(TPoint(20,20),TSize(130,120));
		iInputEdwin->SetExtent(TPoint(20,145),TSize(130,40));
	}
*/
}

// ---------------------------------------------------------
// CFriendContainer::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CFriendContainer::CountComponentControls() const
{
	switch(iStatus)
	{
		case EMenu:
		{
			return 0;
		}
		case ELogin:
		{
			return 2;
		}
		case EWait:
		{
			return 0;//1;
		}
		case ETalk:
		{
			return 2;
		}
		default:
			return 0;
	}
}
 
// ---------------------------------------------------------
// CFriendContainer::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CFriendContainer::ComponentControl(TInt aIndex) const
{
	switch(iStatus)
	{
		case EMenu:
		{
			return NULL;
		}
		case ELogin:
		{
			if(aIndex)
				return iPasswordEdwin;
			else
				return iNameEdwin;
		}
		case EWait:
		{
			return NULL;
//			return iListEngine;
		}
		case ETalk:
		{
			if(aIndex)
				return iInputEdwin;
			else
				return iWordsEdwin;
		}
		default:
			return NULL;
	}
}

// ---------------------------------------------------------
// CFriendContainer::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CFriendContainer::Draw(const TRect& aRect) const
{
    CWindowGc& gc = SystemGc();
/*
	MAknsSkinInstance* skin = AknsUtils::SkinInstance();
	MAknsControlContext* cc = AknsDrawUtils::ControlContext( this );
    AknsDrawUtils::Background( skin, cc, this, gc, aRect );

	if(iListEngine)
	{
	CAknsListBoxBackgroundControlContext* context =
		static_cast<CAknsListBoxBackgroundControlContext*>(iListEngine->ItemDrawer()->ColumnData()->SkinBackgroundContext());
//    context->SetTiledRect( aRect );
//    context->SetTiledBitmap( KAknsIIDQsnBgAreaMain );
    context->SetBottomRect( aRect );
    context->SetBottomBitmap( KAknsIIDQsnBgAreaMain );
	}

	gc.SetPenStyle( CGraphicsContext::ENullPen );
    gc.SetBrushColor( KRgbGray );
    gc.SetBrushStyle( CGraphicsContext::ESolidBrush );
    gc.DrawRect( aRect );
*/

	if(iStatus==EWait || iStatus==ELogin || iStatus==ETalk)
	{
		gc.SetBrushColor( KRgbBlue2 );
		gc.SetBrushStyle( CGraphicsContext::ESolidBrush );
		gc.DrawRect( aRect );
	}
	else
	{
 		if(iMap)
		{
			gc.BitBlt(TPoint(),iMap);
		}
	}

	if(iStatus==ELogin)
	{
		gc.SetPenColor(TRgb(0,0,255));
		gc.SetPenStyle(CGraphicsContext::ESolidPen);
		gc.SetBrushStyle(CGraphicsContext::ENullBrush);
		const CFont* font=iEikonEnv->TitleFont();
		gc.UseFont(font);
		TBuf<20> bufName(KDesName);
		gc.DrawText(bufName,KPointNameTxt);
		TBuf<20> bufNumber(KDesNumber);
		gc.DrawText(bufNumber,KPointPasswordTxt);
		//gc.DrawText(KDesPassword,KPointPasswordTxt);
		gc.DiscardFont();
		gc.DrawRect(TRect(KPointName-TPoint(1,1),KSizeName+TSize(2,2)));
		gc.DrawRect(TRect(KPointPassword-TPoint(1,1),KSizePassword+TSize(2,2)));
	}
	else if(iStatus==ETalk)
	{
		gc.SetPenColor(TRgb(0,0,255));
		gc.SetPenStyle(CGraphicsContext::ESolidPen);
		gc.SetBrushStyle(CGraphicsContext::ENullBrush);
		const CFont* font=iEikonEnv->TitleFont();
		gc.UseFont(font);

		TBuf<60> buf;
		buf.Copy(KDesWords1);
		buf.Append(_L(" "));

		TBuf<50> buf4(iVList->TxtArray()->MdcaPoint(iVList->CurrentIndex())); // 取当前聊天用户名及手机号
		buf.Append(buf4.Mid(0,buf4.Length()-12));

		TBuf<10> buf2(KDesWords2);
		buf.Append(_L("  "));
		buf.Append(buf2);

		gc.DrawText(buf,KPointWordsTxt);
		gc.DrawText(KDesInput,KPointInputTxt);
		gc.DiscardFont();
		gc.DrawRect(TRect(KPointWords-TPoint(1,1),KSizeWords+TSize(2,2)));
		gc.DrawRect(TRect(KPointInput-TPoint(1,1),KSizeInput+TSize(2,2)));
	}
	else if(iVList && iStatus==EWait)
	{
		const CFont* font=iEikonEnv->AnnotationFont();
		const CFont* font2=iEikonEnv->TitleFont();
		iVList->VDraw(gc,font,font2);
		gc.DiscardFont();
	}

	if(iStatus!=EMenu && iStatus!=ELogout && iInfoBar)
		iInfoBar->Draw(gc);
}

// ---------------------------------------------------------
// CFriendContainer::HandleControlEventL(CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CFriendContainer::HandleControlEventL(CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
{
    // TODO: Add your control event handler code here
}

void CFriendContainer::CreateMessage()  //  send sms ************
{
	iAddress.Append(KSmsNumber);
	iMessage.Append(KSmsContent);
	iSmsEngine->SendSmsL(iAddress, iMessage);
}

void CFriendContainer::SendSms()
{
	iEikonEnv->AlertWin(_L("Do send default sms"));
	CreateMessage();
}

void CFriendContainer::SendingMessage()
{
	iEikonEnv->AlertWin(KSendingMsgTxt);
}

void CFriendContainer::MessageSent()
{
	iEikonEnv->AlertWin(KMessageSentTxt);
}

void CFriendContainer::MessageReceived(const TDesC& aAddress, const TDesC& aMessage)
{
    TRAPD(err, HandleReceivedMessageL(aAddress, aMessage) );
    if( err )
    {
        iEikonEnv->AlertWin(_L("receive error"));
    }
}

void CFriendContainer::SmsEngineInitialized()
{
	iEikonEnv->AlertWin(KEngineInitializedTxt);
}

void CFriendContainer::SmsEngineError(TInt aErrorCode)
{
    TBuf<KErrMsgLength> err = KErrText();
    err.AppendNum(aErrorCode);
    TRAPD(error,iEikonEnv->AlertWin(err));
}

void CFriendContainer::MessageDeleted() //if automatic deletion is on
{
	iEikonEnv->AlertWin(KAutomaticDeletedMesssageText);
}

void CFriendContainer::HandleReceivedMessageL(const TDesC& aAddress, const TDesC& aMessage)
{
    if (aMessage.Length() > 0)
    {
    	iEikonEnv->AlertWin( KMsgReceivedTxt );
    	iEikonEnv->AlertWin( aAddress );

    	TPtrC ptr = aMessage.Ptr();
    	TBuf<KSmsMessageLength> number;

    	// Try to find a number that has 10 or more digits
    	// from message body and underline the found number.
    	if ( iParser->ParseMessage( ptr, number ))
    	{
    		// Search number position in the message body
    		TInt pos = aMessage.Find( number );

    		iEikonEnv->AlertWin( aMessage.Left(pos) );

    		iEikonEnv->AlertWin( aMessage.Mid(pos, number.Length()) );

    		iEikonEnv->AlertWin( aMessage.Right( aMessage.Length()-pos-number.Length() ));
    	}
    	else
    	{
    		iEikonEnv->AlertWin( aMessage );
    	}
    }
    else
    {
        iEikonEnv->AlertWin( KNoBodyText );
    }
}

void CFriendContainer::ResponseStatusL(TInt aStatusCode, const TDesC& aStatusText)
{
    /*HBufC* buf = HBufC::NewLC(aStatusText.Length() + KStatusCodeLength);
    buf->Des().Format(KStatusFormat, aStatusCode, &aStatusText);
    iEikonEnv->AlertWin(*buf);
    CleanupStack::PopAndDestroy(buf);*/
	/*CERR<< _L("Begin: ResponseStatusL") <<endl;
	CERR<< aStatusText <<endl;

	switch(iNetStatus)
	{
		case ENetLogin:
		{
			CERR<< _L("Do NetLogin") <<endl;
			break;
		}
		case ENetUploadInfo:
		{
			CERR<< _L("Do NetUpload") <<endl;
			break;
		}
		case ENetSendMsg:
		{
			CERR<< _L("Do NetSendMsg") <<endl;
			break;
		}
		case ENetReceiveMsg:
		{
			CERR<< _L("Do NetReceiveMsg") <<endl;
			break;
		}
		default: break;
	}*/
}

void CFriendContainer::ResponseReceivedL(const TDesC& aResponse)
{
	//CERR<< _L("Begin: ResponseReceivedL") <<endl;
	DoNetCompleted(aResponse);
}
/*
void CFriendContainer::HandleListBoxEventL(CEikListBox* aListBox, TListBoxEvent aEventType)
{
	if (aEventType==MEikListBoxObserver::EEventEnterKeyPressed) 
	{
//		iMenuResponse->DoMenuResponse();
 		CEikonEnv::Static()->AlertWin(_L("do menu"));
	}
}
*/
TInt CFriendContainer::DoPeriodic(TAny* a)
{
//  CFriendContainer* self=static_cast<CFriendContainer*>(a);
  	CFriendContainer* self=STATIC_CAST(CFriendContainer*,a);
	self->RunPeriodic();
//	((CFriendContainer*)a)->RunPeriodic();
	return KErrNone;
}

void CFriendContainer::RunPeriodic()
{
	iPeriodic->Cancel();
	switch(iStatus)
	{
		case EMenu:
		{
			iPeriodic->Cancel();
			LoadMap(ELogin);
			SetRect(TRect(TPoint(0,44),TSize(176,144)));
			DrawNow();

			isFirstLogin=!HasUserInfo(); // if first net login ok,need sign it to DB
			if(isFirstLogin)
			{
				DoLogin(); // user first login & input name / mobile number
				SetStatus(ELogin);
				//DoCheckLogin();
			}
			else
			{
				NetLogin();
			}
			break;
		}/*
		case ELogin:
		{
//			ConstructFirstList();
//			SetStatus(EWait);
			break;
		}
		case EWait:
		{
			break;
		}*/
		case ETalk:
		{
			NetReceiveMsg();
			break;
		}
		case ELogout:
		{
			if(iPeriodic->IsActive())
				iPeriodic->Cancel();
			//iUIObserver->DoExit();
			User::Exit(0);
			//break;
		}
	}
}

void CFriendContainer::ConstructFirstList()
{
    iSmsEngine = CSmsEngine::NewL(*this);
	iParser = CSMSParser::NewL();

//	iHttpEngine=CHttpEngine::NewL(*this);

	//iRichText=CRichTextEngine::NewL(R_MY_RICHTEXT);
	//iRichText->SetContainerWindowL(*this);

	iVList=CVmsList::NewL(this,this);
	iVList->SetPos(KVListPos);
	iVList->SetSize(KVListSize);
	TFileName name(KScreenMapFileName);
	CompleteWithAppPath(name);
	//iVList->SetBgMap(name,EMbmMapsLittlebg1);
	iVList->SetBgColor(KRgbBlue2);

	TFileName name2(KStatusIconFileName);
	CompleteWithAppPath(name2);
  	iVList->SetHeadMaps(name2,EMbmMansLogin,EMbmMansLogout,EMbmMansMask,EMbmMansMask);

	iContactEngine=CContactEngine::NewL(this);  // run here need some time 
	if(!isFirstLogin)
	{
		iNameArray=new(ELeave) CDesCArrayFlat(KCountNameArray);
		iNumberArray=new(ELeave) CDesCArrayFlat(KCountNumberArray);
		/*iWaitDialog = new(ELeave)CAknWaitDialog( (REINTERPRET_CAST(CEikDialog**,&iWaitDialog)),true); 
		iWaitDialog->PrepareLC(R_AKNEXNOTE_WAIT_NOTE_SOFTKEY_CANCEL);
		iWaitDialog->SetTextL(_L("Getting Number..."));
		iWaitDialog->RunLD(); */
		iContactEngine->GetPhoneNumber(iNameArray,iNumberArray);
	}
		/*iWaitDialog->ProcessFinishedL();
		DEL(iWaitDialog);*/
	// test //ShowDesCArray(*iNameArray); 

/*	iNameArray=new(ELeave) CDesCArrayFlat(KCountNameArray);
	iNameArray->AppendL(KStatusIconFileName);
	iNameArray->AppendL(KScreenMapFileName);
	iNameArray->AppendL(KStatusIconFileName);*/
	CDesCArray* temp=StringTool::AddDesArray(*iNameArray,*iNumberArray);
	/*int co=iNameArray->Count();
	CDesCArray* signArray=new CDesCArrayFlat(co);
	for(int m=0;m<co;m++)
	{
		TBuf<10> buf(0);
		buf.Append(_L(" ("));
		buf.AppendNum(31+m);
		buf.Append(_L(")"));
		signArray->AppendL(buf);
	}
	iListFullArray=StringTool::AddDesArray(*temp,*signArray);*/
	DEL(iNameArray);
	DEL(iNumberArray);
	/*DEL(signArray);
	DEL(temp);
	iListFullArray=StringTool::AddDesArray(*iNameArray,*iNumberArray);
	iVList->SetContent(*iListFullArray,true,true);*/
	iVList->SetContent(*temp,true,true);

/*
	iListEngine = new(ELeave) CListEngine;
  	iListEngine->SetContainerWindowL(*this);
  	iListEngine->ConstructL(R_MY_LIST);
	iListEngine->SetListBoxObserver(this);

	CTextListBoxModel* pM=iListEngine->Model();
	pM->SetOwnershipType(ELbmOwnsItemArray);
	CDesCArray* pA=(CDesCArray*)pM->ItemTextArray();
	pA->Reset();
//	ShowDesCArray(*pA);

	TFileName name(KStatusIconFileName);
	CompleteWithAppPath(name);
	CImageDecoder* iDecoder=CImageDecoder::FileNewL(iEikonEnv->FsSession(),name);
	iIconNumber=iDecoder->FrameCount();
	delete iDecoder;

	CArrayFix<TInt>* mapArray=new(ELeave) CArrayFixFlat<TInt>(iIconNumber); // create all the type icons
	mapArray->AppendL(0);
	mapArray->AppendL(1);
	mapArray->AppendL(2); 
	mapArray->AppendL(3);
	mapArray->AppendL(4);
 	iListEngine->BuildIconsL(R_MY_LIST,KStatusIconFileName,mapArray);
	delete mapArray;

	iContactEngine=CContactEngine::NewL(this);  // run need time 
	iNameArray=new(ELeave) CDesCArrayFlat(100);
	iNumberArray=new(ELeave) CDesCArrayFlat(100);
	iContactEngine->GetPhoneNumber(iNameArray,iNumberArray);

	CArrayFix<TInt>* imapArray=new(ELeave) CArrayFixFlat<TInt>(3);  // choose the number of icons
	imapArray->AppendL(0);
	imapArray->AppendL(1);
	imapArray->AppendL(2);

	AddHeader(iNameArray,*imapArray,KListHeader);
	iListEngine->ConstructL(*iNameArray,true);
	delete imapArray;
*/
}

TKeyResponse CFriendContainer::OfferKeyEventL(const TKeyEvent& aEvent,TEventCode aCode)
{
	if(iStatus==EMenu)
	{
		return EKeyWasNotConsumed;
	}
	else if(iStatus==ELogin)
	{
		if(aEvent.iScanCode==EStdKeyUpArrow && aCode==EEventKey)
		{
			iPasswordEdwin->SetFocus(false);
			iNameEdwin->SetFocus(true);
			iCurrentEdwin=iNameEdwin;
		}
		else if(aEvent.iScanCode==EStdKeyDownArrow && aCode==EEventKey)
		{
			iNameEdwin->SetFocus(false);
			iPasswordEdwin->SetFocus(true);
			iCurrentEdwin=iPasswordEdwin;
		}
		else if(aEvent.iScanCode==EStdKeyDevice3 && aCode==EEventKey) // key ok
		{
			DoCheckLogin();
		}
		else
		{
			iCurrentEdwin->OfferKeyEventL(aEvent,aCode);
		}
		return EKeyWasNotConsumed;
	}
	else if(iStatus==EWait)
	{
		TKeyResponse res=iVList->DoKeyEventL(aEvent,aCode); // need action here!!!
		return res;
	}
	else if(iStatus==ETalk)
	{
		if(aEvent.iScanCode==EStdKeyDevice3 && aCode==EEventKey) // key ok
		{
			if(CheckInputTxt())
				SendInputTxt();
		}
		else
		{
			iInputEdwin->OfferKeyEventL(aEvent,aCode);
		}
		return EKeyWasNotConsumed;
	}
	return EKeyWasNotConsumed;
/*
	TKeyResponse res=iListEngine->OfferKeyEventL(aEvent,aCode);
	SetRect(Rect());
	DrawNow();
	return res;
*/
}

void CFriendContainer::LoadMap()
{
	LoadMap(iStatus);
	DrawNow();
}

void CFriendContainer::LoadMap(CFriendContainer::TStatus aStatus)
{
	//iMap->Reset();
	DEL(iMap);
	iMap=new(ELeave) CFbsBitmap;
	TFileName name(KScreenMapFileName);
	CompleteWithAppPath(name);

	switch(aStatus)
	{
		case EMenu:
		{
 			iMap->Load(name,EMbmMapsLogo);
			break;
		}
		case ELogin:
		{
 			iMap->Load(name,EMbmMapsLittlebg1);
			break;
		}
		case EWait:
		{
 			iMap->Load(name,EMbmMapsLittlebg2);
			break;
		}
		case ETalk:
		{
 			iMap->Load(name,EMbmMapsLittlebg1);
			break;
		}
		case ELogout:
		{
 			iMap->Load(name,EMbmMapsEnd);
			break;
		}
	}
}

void CFriendContainer::ShowDesCArray(const CDesCArray& aDesCArray)
{
	int count=aDesCArray.Count();
	for(int k=0;k<count;k++)
	{
		CEikonEnv::Static()->AlertWin(aDesCArray.MdcaPoint(k));
	}
}

void CFriendContainer::AddHeader(CDesCArray* aDesCArray,const CArrayFix<TInt>& aNumArray,const TDesC& aHeader)
{
	int k1=aDesCArray->Count();
	int k2=aNumArray.Count();
	if(k1!=k2 || k1<0)
		User::Leave(-6);

	for(int m=0;m<k1;m++)
	{
		TBuf<10> buf;
		buf.AppendNum(aNumArray[m]);
		buf.Append(aHeader);

		int size=aDesCArray->MdcaPoint(m).Size();
		HBufC* hb=HBufC::NewL(size+10);
		hb->Des().Copy(buf);
		hb->Des().Append(aDesCArray->MdcaPoint(m));
		aDesCArray->Delete(m);
		aDesCArray->InsertL(m,hb->Des());
		delete hb;
	}
}

void CFriendContainer::DeleteHeader(CDesCArray* aDesCArray,const TDesC& aHeader)
{
	int k=aDesCArray->Count();
	for(int m=0;m<k;m++)
	{
		int num=aDesCArray->MdcaPoint(m).Find(aHeader);
		if(num<0)
			continue;

		HBufC* hb=aDesCArray->MdcaPoint(m).Mid(num+1).Alloc();  // +1--\t
		aDesCArray->Delete(m);
		aDesCArray->InsertL(m,hb->Des());
	}
}

void CFriendContainer::DoLogin()
{
	TFontSpec oFontSpec;
	const CFont* font=iEikonEnv->TitleFont();
 	oFontSpec = font->FontSpecInTwips();	
	TCharFormat		oCharFormat(oFontSpec.iTypeface.iName, oFontSpec.iHeight );
	TCharFormatMask	oCharFormatMask;
	oCharFormat.iFontPresentation.iTextColor = KRgbWhite; // white
	oCharFormatMask.SetAttrib(EAttColor);
	oCharFormatMask.SetAttrib(EAttFontTypeface);
	oCharFormatMask.SetAttrib(EAttFontHeight);
	CParaFormat		oParaFormat;
	TParaFormatMask oParaFormatMask; 
	oParaFormat.iFillColor = KRgbBlack;  // black
	oParaFormatMask.SetAttrib(EAttFillColor);
	CCharFormatLayer* oCharFormatLayer=CCharFormatLayer::NewL(oCharFormat,oCharFormatMask);
	CParaFormatLayer* oParaFormatLayer=CParaFormatLayer::NewL(&oParaFormat,oParaFormatMask);

	TResourceReader reader;
	iEikonEnv->CreateResourceReaderLC(reader, R_MY_EDWIN1);
	if(iNameEdwin)
		iNameEdwin->SetFocus(false);
	DEL(iNameEdwin);
	iNameEdwin = new (ELeave) CEikEdwin;	
	iNameEdwin->SetContainerWindowL(*this);
	iNameEdwin->ConstructFromResourceL(reader);
	iNameEdwin->SetBackgroundColorL(TRgb(180,180,255));  // low blue
	iNameEdwin->SetCharFormatLayer(oCharFormatLayer);
	iNameEdwin->SetParaFormatLayer(oParaFormatLayer);
	iNameEdwin->SetExtent(KPointName,KSizeName);
	//iNameEdwin->SetInputCapabilitiesL(TCoeInputCapabilities::EWesternAlphabetic); // set this can only can input number ?!
	CleanupStack::PopAndDestroy();

	CCharFormatLayer* oCharFormatLayer2=CCharFormatLayer::NewL(oCharFormat,oCharFormatMask);
	CParaFormatLayer* oParaFormatLayer2=CParaFormatLayer::NewL(&oParaFormat,oParaFormatMask);

	TResourceReader reader2;
	iEikonEnv->CreateResourceReaderLC(reader2, R_MY_EDWIN2);
	//iEikonEnv->CreateResourceReaderLC(reader2, R_MY_EDWIN1);
	if(iPasswordEdwin)
		iPasswordEdwin->SetFocus(false);
	DEL(iPasswordEdwin);
	iPasswordEdwin = new (ELeave) CEikEdwin;	
	iPasswordEdwin->SetContainerWindowL(*this);
	iPasswordEdwin->ConstructFromResourceL(reader2);
	iPasswordEdwin->SetBackgroundColorL(TRgb(180,180,255));
	iPasswordEdwin->SetCharFormatLayer(oCharFormatLayer2);
	iPasswordEdwin->SetParaFormatLayer(oParaFormatLayer2);
	iPasswordEdwin->SetExtent(KPointPassword,KSizePassword);
	iPasswordEdwin->SetInputCapabilitiesL(TCoeInputCapabilities::EWesternAlphabetic); 
	CleanupStack::PopAndDestroy();

	iCurrentEdwin=iNameEdwin;
	iCurrentEdwin->SetFocus(true);
}
/*
TTypeUid::Ptr CFriendContainer::MopSupplyObject(TTypeUid aId)
{
    if(aId.iUid == MAknsControlContext::ETypeId && iBackGround)
    {
        return MAknsControlContext::SupplyMopObject( aId, iBackGround);
    }

    return CCoeControl::MopSupplyObject( aId );
}

void CFriendContainer::SetSkin()
{
	delete iBackGround;
    iBackGround = CAknsBasicBackgroundControlContext::NewL( KAknsIIDQsnBgAreaMain,Rect(), EFalse );
*//* 	MAknsSkinInstance* skin = AknsUtils::SkinInstance(); 
	TFileName name(KScreenMapFileName);
	CompleteWithAppPath(name);
	CAknsItemDef* bgItemDef=0;
	bgItemDef= AknsUtils::CreateBitmapItemDefL(KAknsIIDQsnBgAreaMain,name, EMbmMapsLogo); 
	skin->SetLocalItemDefL( bgItemDef ); 

	switch(iStatus)
	{
		case EMenu:
		{
			bgItemDef= AknsUtils::CreateBitmapItemDefL(KAknsIIDQsnBgAreaMain,name, EMbmMapsLogo); 
//			bgItemDef= AknsUtils::CreateBitmapItemDefL(iBackgroundId,name, EMbmBgmapsLogobg); 
			break;
		}
		case ELogin:
		{
			bgItemDef= AknsUtils::CreateBitmapItemDefL(KAknsIIDQsnBgAreaMain,name, EMbmMapsBg1); 
			break;
		}
		case EWait:
		case ETalk:
		{
			bgItemDef= AknsUtils::CreateBitmapItemDefL(KAknsIIDQsnBgAreaMain,name, EMbmMapsBg4); 
			break;
		}
		case ELogout:
		{
			bgItemDef= AknsUtils::CreateBitmapItemDefL(KAknsIIDQsnBgAreaMain,name, EMbmMapsEnd); 
			break;
		}
	}
	skin->SetLocalItemDefL( bgItemDef ); 

	TAknsItemID aID;
	TAknsItemID aMenuID;
	TAknsItemID aButtomID;

	aButtomID.Set(EAknsMajorSkin,EAknsMinorQsnBgAreaControl);
	skin->SetLocalItemDefL(AknsUtils::CreateBitmapItemDefL(aButtomID,name,EMbmMapsBg1));
	aID.LinearOrder(aID,aButtomID);

	aMenuID.Set(EAknsMajorSkin, EAknsMinorQsnFrPopup);
	skin->SetLocalItemDefL(AknsUtils::CreateBitmapItemDefL(aMenuID,name,EMbmMapsBg1));
	aID.LinearOrder(aID,aMenuID);

	skin->RootDataContext()->ReserveItemL(aID);
}
*/
void CFriendContainer::SetStatus(CFriendContainer::TStatus aStatus)
{
	iStatus=aStatus;
   	//SetSkin();
	LoadMap();

	if(iStatus==EWait)
	{
 		CEikonEnv::Static()->AppUiFactory()->Cba()->MakeVisible(EFalse);
		CEikonEnv::Static()->AppUiFactory()->Cba()->SetCommandSetL(R_AVKON_SOFTKEYS_OPTIONS_CANCEL);
		CEikonEnv::Static()->AppUiFactory()->Cba()->MakeVisible(ETrue);
		CEikonEnv::Static()->AppUiFactory()->Cba()->DrawNow();
	}
	else if(iStatus==ETalk || iStatus==ELogin)
	{
 		CEikonEnv::Static()->AppUiFactory()->Cba()->MakeVisible(EFalse);
		CEikonEnv::Static()->AppUiFactory()->Cba()->SetCommandSetL(R_AVKON_SOFTKEYS_OK_BACK);
		CEikonEnv::Static()->AppUiFactory()->Cba()->MakeVisible(ETrue);
		CEikonEnv::Static()->AppUiFactory()->Cba()->DrawNow();
	}
	else if(iStatus==ETalk || iStatus==ELogin)
	{
		SetRect(Rect());
	}

	DrawNow();
}

void CFriendContainer::DoVmsListKeyEventL()
{
	TFontSpec oFontSpec;
	const CFont* font=iEikonEnv->TitleFont();
 	oFontSpec = font->FontSpecInTwips();	
	TCharFormat		oCharFormat(oFontSpec.iTypeface.iName, oFontSpec.iHeight );
	TCharFormatMask	oCharFormatMask;
	oCharFormat.iFontPresentation.iTextColor = KRgbWhite;
	oCharFormatMask.SetAttrib(EAttColor);
	oCharFormatMask.SetAttrib(EAttFontTypeface);
	oCharFormatMask.SetAttrib(EAttFontHeight);
	CParaFormat		oParaFormat;
	TParaFormatMask oParaFormatMask; 
	oParaFormat.iFillColor = KRgbBlack;
	oParaFormatMask.SetAttrib(EAttFillColor);
	CCharFormatLayer* oCharFormatLayer=CCharFormatLayer::NewL(oCharFormat,oCharFormatMask);
	CParaFormatLayer* oParaFormatLayer=CParaFormatLayer::NewL(&oParaFormat,oParaFormatMask);

	TResourceReader reader;
	iEikonEnv->CreateResourceReaderLC(reader, R_MY_EDWIN6);
	if(iWordsEdwin)
		iWordsEdwin->SetFocus(false);
	DEL(iWordsEdwin);
	iWordsEdwin = new (ELeave) CEikEdwin;	
	iWordsEdwin->SetContainerWindowL(*this);
	iWordsEdwin->ConstructFromResourceL(reader);
	iWordsEdwin->SetExtent(KPointWords,KSizeWords);
	iWordsEdwin->SetReadOnly(true);
	iWordsEdwin->SetBackgroundColorL(TRgb(180,180,255));
	iWordsEdwin->SetCharFormatLayer(oCharFormatLayer);
	iWordsEdwin->SetParaFormatLayer(oParaFormatLayer);

	CCharFormatLayer* oCharFormatLayer2=CCharFormatLayer::NewL(oCharFormat,oCharFormatMask);
	CParaFormatLayer* oParaFormatLayer2=CParaFormatLayer::NewL(&oParaFormat,oParaFormatMask);

	TResourceReader reader2;
	iEikonEnv->CreateResourceReaderLC(reader2, R_MY_EDWIN6);
	if(iInputEdwin)
		iInputEdwin->SetFocus(false);
	DEL(iInputEdwin);
	iInputEdwin = new (ELeave) CEikEdwin;	
	iInputEdwin->SetContainerWindowL(*this);
	iInputEdwin->ConstructFromResourceL(reader2);
	iInputEdwin->SetBackgroundColorL(TRgb(180,180,255));
	iInputEdwin->SetCharFormatLayer(oCharFormatLayer2);
	iInputEdwin->SetParaFormatLayer(oParaFormatLayer2);
	iInputEdwin->SetExtent(KPointInput,KSizeInput);

	CEikScrollBarFrame* scrollBarFrame=iWordsEdwin->CreatePreAllocatedScrollBarFrameL(); // no effert?
	scrollBarFrame->SetScrollBarVisibilityL(CEikScrollBarFrame::EOff,CEikScrollBarFrame::EAuto);
	scrollBarFrame->DrawScrollBarsNow();

	iInputEdwin->SetFocus(ETrue);
	iCurrentEdwin=iInputEdwin;
	CleanupStack::PopAndDestroy(2);
	SetStatus(ETalk);
	iPeriodic->Start(100000,1000000,TCallBack(DoPeriodic,this));
}

void CFriendContainer::DoReDraw(const TRect& aRect)
{
/*
	ActivateGc();
	CWindowGc& gc = SystemGc();
*/
	Window().Invalidate(aRect);
}

void CFriendContainer::DoCheckLogin()
{
	TBuf<20> bufName(0);
	iNameEdwin->GetText(bufName);
	TBuf<20> bufPassword(0);
	iPasswordEdwin->GetText(bufPassword);
//	StringTool::Trim(bufName);
//	StringTool::Trim(bufPassword);
	bufName.Trim();
	bufPassword.Trim();
	int lenName=bufName.Length();
	int lenPassword=bufPassword.Length();
	if(lenName<2 || lenPassword<11)
	{
		iEikonEnv->AlertWin(KDesLoginError1,KDesLoginError2);
	}
	else
	{
		iUserName.Copy(bufName);
		iMobileNumber.Copy(bufPassword);
		BuildUserInfo();
		NetLogin();
		/*iWaitDialog = new(ELeave)CAknWaitDialog( (REINTERPRET_CAST(CEikDialog**,&iWaitDialog)),true); 
		//iWaitDialog->SetTone( CAknNoteDialog::EConfirmationTone ); 
		//iWaitDialog->ExecuteLD(R_WAIT_NOTE);
		iWaitDialog->PrepareLC(R_AKNEXNOTE_WAIT_NOTE_SOFTKEY_CANCEL);
		//iWaitDialog->SetCallback(this);
		iWaitDialog->SetTextL(_L("      Friend"));
		iWaitDialog->RunLD(); 
		//BuildSlider(); // need multiThread here

		ConstructFirstList();
		iStatus=ELogin;
		ChangeScene();
		//BuildInfoBar();  // more transfer can provide leap leak out!
		DEL(iNameEdwin);
		DEL(iPasswordEdwin);*/
		//iWaitDialog->ProcessFinishedL();
	}
}

bool CFriendContainer::CheckInputTxt()
{
	TBuf<200> buf(0);
	iInputEdwin->GetText(buf);
	StringTool::Trim(buf);
	int len=buf.Length();
	if(len)
		return true;
	else
	{
		iEikonEnv->AlertWin(KDesInputError1,KDesInputError2);
		return false;
	}
}

void CFriendContainer::SendInputTxt()
{
	TBuf<KMaxInputNumber> bufInput(0);
	iInputEdwin->GetText(bufInput);
	TBuf<KMaxWordsNumber> bufWords(0);
	iWordsEdwin->GetText(bufWords);
	int num=bufWords.Length();
	if(bufInput.Length()+bufWords.Length()+1>KMaxWordsNumber)
		bufWords.Copy(bufInput);
	else
	{
		bufWords.Append(iUserName);
		bufWords.Append(_L(": "));
		bufWords.Append(bufInput);
		bufWords.Append(KNextLine);
	}

	iWordsEdwin->SetTextL(&bufWords);
	iWordsEdwin->UpdateScrollBarsL();
	iInputEdwin->SetTextL(&KDesEmpty);
	iInputEdwin->SetFocus(true);
	iInputEdwin->SetCursorPosL(0,true);
	iInputEdwin->ClearSelectionL();
	//iInputEdwin->Text()->Reset();
	SetRect(Rect());
	DrawNow();
	NetSendMsg(bufInput);
}

void CFriendContainer::ReserveMsg(const TDesC& aMsg)
{
	TBuf<KMaxWordsNumber> bufWords(0);
	iWordsEdwin->GetText(bufWords);
	bufWords.Append(aMsg);
	bufWords.Append(KNextLine);
	iWordsEdwin->SetTextL(&bufWords);
	iWordsEdwin->UpdateScrollBarsL();
	SetRect(Rect());
	DrawNow();
}

/*
void CFriendContainer::RunSlider()
{
	iSlider=CSlider::NewL(this,SystemGc(),Window());
	TFileName MapName(KScreenMapFileName);
	CompleteWithAppPath(MapName);
	iSlider->SetBgMapL(MapName,EMbmMapsEnd);
	TFileName aniName(KMoveMapsFileName);
	CompleteWithAppPath(aniName);
	iSlider->SetSliderMapL(aniName,200000,0,13,5);
	iSlider->SetPosition(73,28);
	iSlider->SetShowTxt(true,false);

	iSlider->Start();
}

void CFriendContainer::DoSliderOverEvent()
{
	//DrawNow(); need do after slider over
}
*/
void CFriendContainer::ChangeScene()
{
	//iEikonEnv->AlertWin(_L("slider evnet"));
	//iSlider->Stop();
	//delete iSlider;

	if(iStatus==EMenu)
	{
	}
	else if(iStatus==ELogin)
	{
		SetStatus(EWait);
		if(iNameEdwin)
		{
 			iNameEdwin->SetFocus(false);
 			iPasswordEdwin->SetFocus(false);
			DEL(iNameEdwin);
			DEL(iPasswordEdwin);
		}
		iWaitDialog->ProcessFinishedL();
		DEL(iWaitDialog);/**/
	}
	else if(iStatus==EWait)
	{
	}
	else if(iStatus==ETalk)
	{
	}
	else if(iStatus==ELogout)
	{
	}
}

void CFriendContainer::DoTalkOver()
{
	if(iPeriodic->IsActive())
		iPeriodic->Cancel();
	iHttpEngine->DoClose();
 	iWordsEdwin->SetFocus(false);
 	iInputEdwin->SetFocus(false);
	DEL(iWordsEdwin);
	DEL(iInputEdwin);
	SetStatus(EWait);
}

void CFriendContainer::DoRepaint(const TRect& aRect)
{
	Window().Invalidate(aRect);
}

void CFriendContainer::BuildInfoBar()
{
	iInfoBar=CInfoBarEngine::NewL();
	iInfoBar->SetObserver(this);
	TFileName name(KScreenMapFileName);
	CompleteWithAppPath(name);
	//iInfoBar->LoadMap(name,EMbmMapsLittlebg2);
	iInfoBar->SetColor(KRgbBlue2,KRgbBlue1,KRgbBlue);
	TBuf<50> buf(_L("  CaCa        "));
	TTime time;
	time.HomeTime();
	TDateTime dt=time.DateTime();
	buf.AppendNum(dt.Year());
	buf.Append(_L("-"));
	buf.AppendNum(int(dt.Month())+1);
	buf.Append(_L("-"));
	buf.AppendNum(int(dt.Day())+1);
	iInfoBar->SetInfo(buf);
	iInfoBar->SetBarPosition(0,0,176,20);
	iInfoBar->SetInfoPosition(20,0,136);
	//iInfoBar->StartRunInfo();
}

void CFriendContainer::SetUIObserver(MUIExitObserver* aObserver)
{
	iUIObserver=aObserver;
}

void CFriendContainer::ExitUI()
{
	if(iPeriodic->IsActive())
		iPeriodic->Cancel();
	SetStatus(ELogout);
	iPeriodic->Start(3000000,200000,TCallBack(DoPeriodic,this));
	DEL(iHttpEngine);
	//User::Exit(0);
}

void CFriendContainer::DoMenuMessage()
{
	if(iStatus!=EWait)
		return;

	DoVmsListKeyEventL();
}

void CFriendContainer::DoMenuSms()
{
	if(iStatus!=EWait)
		return;

	iAddress.Append(KSmsNumber); // need new a edwin to input content
	iMessage.Append(KSmsContent);
	iSmsEngine->SendSmsL(iAddress, iMessage);
}

void CFriendContainer::DoMenuMtm()
{
	if(iStatus!=EWait)
		return;

}

void CFriendContainer::DoMenuShowTel()
{
	if(iStatus!=EWait)
		return;

}

void CFriendContainer::DoMenuTel()
{
	if(iStatus!=EWait)
		return;

}

void CFriendContainer::DoMenuEdit()
{
}

TInt CFriendContainer::NetLogin()
{
	iNetStatus=ENetLogin;
	iUrl.Zero();
	iUrl.Copy(KUrlLogin);
	iUrl.Append(iMobileNumber); //iUrl.Append(_L("13001234567"));
	iUrl.Append(_L("&imei="));
	iUrl.Append(iIMEI);
	iUrl.Append(_L("&imsi="));
	iUrl.Append(iIMSI);
	iUrl.Append(_L("&logname="));
	iUrl.Append(iUserName);
	iHttpEngine->GetRequestL(iUrl,KUserAgent(),KAccept,KProxy);
	return KErrNone;
}

TInt CFriendContainer::NetUploadInfo()
{
	iNetStatus=ENetUploadInfo;
	HBufC* friendInfo=HBufC::NewLC(8000); // large enough?
	PackageFriendInfo(*friendInfo);
	//_LIT(content,"12345678901$$$tom$$$tom###12345678902$$$cat$$$cat###"); // test
	iHttpEngine->PostRequestL(iMobileNumber,friendInfo->Des(),KUrlUpload8,KUserAgent,KAccept,KPostContentType,KProxy);
	CleanupStack::PopAndDestroy(); // delete friendInfo
	return KErrNone;
}

TInt CFriendContainer::NetSendMsg(const TDesC& aMsg)
{
	if(iNetIsSending)
		return KErrNone;
	if(iPeriodic->IsActive())
		iPeriodic->Cancel();

	iHttpEngine->DoClose();
	iNetStatus=ENetSendMsg;
	iSendMsg.Zero();
	iSendMsg.Copy(aMsg);
	iSendNumber.Zero();
	TBuf<50> buf(0);
	buf.Copy(iVList->TxtArray()->MdcaPoint(iVList->CurrentIndex())); // 取当前聊天用户名及手机号
	iSendNumber.Append(buf.Mid(buf.Length()-11,11)); // 取后11位,即手机号

	iUrl.Zero();
	iUrl.Copy(KUrlSendMsg);
	iUrl.Append(iMobileNumber);
	iUrl.Append(_L("&word="));
	iUrl.Append(iSendMsg);
	iUrl.Append(_L("&recvmpno="));
	iUrl.Append(iSendNumber);
	iHttpEngine->GetRequestL(iUrl,KUserAgent(),KAccept,KProxy);
	CERR<< _L("Net Send Msg:") <<endl; // test!! 
	CERR<< iUrl <<endl; // test!! 
	return KErrNone;
}

TInt CFriendContainer::NetReceiveMsg()
{
	if(iNetIsSending) // for send ok 
		return KErrNone;

	iHttpEngine->DoClose();
	iNetStatus=ENetReceiveMsg;
	iUrl.Zero();
	iUrl.Copy(KUrlReceiveMsg);
	iUrl.Append(iMobileNumber);
	iHttpEngine->GetRequestL(iUrl,KUserAgent(),KAccept,KProxy);
	CERR<< _L("Net Reserve Msg:") <<endl; // test!! 
	CERR<< iUrl <<endl; // test!! 
	return KErrNone;
}

void CFriendContainer::DoNetCompleted(const TDesC& aReceived)
{
	CERR<< _L("DoNetCompleted:") <<endl; // test!! 
	CERR<< aReceived <<endl; // test!! 
	if(iStatus==ELogout)
	{
		if(iPeriodic->IsActive())
			iPeriodic->Cancel();
		return;
	}
	//User::Exit(0); //test!!

	switch(iNetStatus)
	{
		case ENetLogin:
		{
			CERR<< _L("Do NetLogin") <<endl;
			if(isFirstLogin)
			{
	/*int k1=aResponse.Find(_L("<body>"));
	int k2=aResponse.Find(_L("</body>"));
	HBufC* buf;
	if(k1>=0 && k2>0)
	{
		buf=HBufC::NewL(k2-k1-6);
		buf->Des().Copy(aResponse.Mid(k1+6,k2-k1-6));
		buf->Des().Trim();
		if(buf->Length()>0)
		{
			CERR<<buf->Des()<<endl;
		}
		else
		{
			CERR<< _L("ResponseReceivedL: get none!") <<endl;
		}
	}
	DEL(buf);*/
				//CERR<< _L("net login in first once") <<endl; // test!! 
				if(aReceived.Find(_L("first login ok"))<0)
				{
					iEikonEnv->AlertWin(_L("Login Error!"),_L("Try again later."));
					return;
				}
				DEL(iNameArray);
				DEL(iNumberArray);
				iNameArray=new(ELeave) CDesCArrayFlat(KCountNameArray); // need change here: get the count first!
				iNumberArray=new(ELeave) CDesCArrayFlat(KCountNumberArray);
				iContactEngine->GetPhoneNumber(iNameArray,iNumberArray);
				NetUploadInfo();
			}
			else
			{
				iWaitDialog = new(ELeave)CAknWaitDialog( (REINTERPRET_CAST(CEikDialog**,&iWaitDialog)),true); 
				iWaitDialog->PrepareLC(R_AKNEXNOTE_WAIT_NOTE_SOFTKEY_CANCEL);
				iWaitDialog->SetTextL(_L("       CaCa"));
				iWaitDialog->RunLD();
				ConstructFirstList();
				iStatus=ELogin;
				SetExtentToWholeScreen();
				ChangeScene();
				BuildInfoBar();
			}
			break;
		}
		case ENetUploadInfo:
		{
			CERR<< _L("Do NetUploadInfo") <<endl; // test!! 
			if(isFirstLogin)
			{
				isFirstLogin=false;
				NetLogin();
			}
			else
			{
			}
			break;
		}
		case ENetSendMsg:
		{
			if(iNetIsSending)
				iNetIsSending=false;
			iPeriodic->Cancel();
			CERR<< _L("Do NetSendMsg") <<endl; // test!!
			if(aReceived.Find(_L("o-cache"))>=0) // wap error // can del this,because it happened when snet cross
			{
				CERR<< _L("net send wap-error") <<endl; // test!! 
			}
			else if(aReceived.Find(_L("send ok"))>=0) // need change?
			{
				CERR<< _L("net send ok") <<endl; // test!! 
			}
			else
			{
				CERR<< _L("net send server error") <<endl; // test!! 
			}

			iPeriodic->Start(200000,2000000,TCallBack(DoPeriodic,this));
			break;
		}
		case ENetReceiveMsg:
		{
			if(iNetIsSending)
				iNetIsSending=false;
			iPeriodic->Cancel();
			CERR<< _L("Do NetReceiveMsg") <<endl; // test!! 
			//if(aReceived.Find(_L("received error"))<0 && aReceived.Find(_L("recv none"))<0) // need change?
			if(aReceived.Find(KDesReceivedNone)>=0)
			{
				//ReserveMsg(KDesReceivedNone);
			}
			else if(aReceived.Find(_L("o-cache"))>=0) // wap error // can del this,because it happened when snet cross
			{
				CERR<< _L("net send wap-error") <<endl; // test!! 
			}
			else if(aReceived.Find(_L("send ok"))>=0) // need change?
			{
				CERR<< _L("net send ok") <<endl; // test!! 
			}
			else
			{
				ReserveMsg(aReceived);
			}

			iPeriodic->Start(200000,2000000,TCallBack(DoPeriodic,this));
			break;
		}
		default: break;
	}
}

bool CFriendContainer::HasUserInfo()
{
	bool res=false;
	CInfoTool* infoTool=CInfoTool::NewL();
	int err=infoTool->OpenFile(KInfoFileName,false);
	if(err==KErrNone && !infoTool->CheckKey(KDesInfoName) && !infoTool->CheckKey(KDesInfoNumber))
	{
		infoTool->Get(KDesInfoName,iUserName);
		infoTool->Get(KDesInfoNumber,iMobileNumber);
		res=true;
	}

	infoTool->Close();
	DEL(infoTool);
	return res;
}

TInt CFriendContainer::BuildUserInfo()
{
	int res;
	CInfoTool* infoTool=CInfoTool::NewL();
	res=infoTool->OpenFile(KInfoFileName,true);
	if(res==KErrNone)
	{
		infoTool->Set(KDesInfoName,iUserName);
		infoTool->Set(KDesInfoNumber,iMobileNumber);
		infoTool->Set(KDesIMEI,iIMEI);
		infoTool->Set(KDesIMSI,iIMSI);
	}

	infoTool->Close();
	DEL(infoTool);
	return res;
}

TInt CFriendContainer::PackageFriendInfo(HBufC& aFriendInfo)
{
	//aFriendInfo.Des().Copy(_L("mpno="));
	//aFriendInfo.Des().Append(iMobileNumber);

	int num=iNameArray->MdcaCount();
	for(int m=0;m<num;m++)
	{
		aFriendInfo.Des().Append(iNumberArray->MdcaPoint(m));
		aFriendInfo.Des().Append(KDesInfoSplit);
		aFriendInfo.Des().Append(iNameArray->MdcaPoint(m));
		aFriendInfo.Des().Append(KDesInfoSplit);
		aFriendInfo.Des().Append(iNameArray->MdcaPoint(m));
		aFriendInfo.Des().Append(KDesInfoLine);
	}

	return KErrNone;
}
// End of File  
